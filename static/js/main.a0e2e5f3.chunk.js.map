{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorboundary.js","redux/search-change/search-types.js","redux/search-robots/robot-types.js","containers/App.js","redux/search-change/search-actions.js","redux/search-robots/robot-actions.js","redux/search-robots/robot-reducer.js","redux/search-change/search-reducers.js","redux/root-Reducer.js","redux/store.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","SearchActionType","CHANGE_SEARCH_FIELD","RobotActionType","SEARCH_ROBOTS_START","SEARCH_ROBOTS_SUCCESS","SEARCH_ROBOTS_FAILURE","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","search","dispatch","event","txt","target","value","payload","fetch","then","response","json","users","catch","INITIAL_STATE","robotReducer","action","searchReducer","rootReducer","combineReducers","middleware","createLogger","thunk","store","createStore","applyMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a0e2e5f3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        return this.state.ErrorBoundary ? \r\n        <h1>OOOOOOOPPS This is not good </h1> :\r\n        this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","const SearchActionType = {\r\n    CHANGE_SEARCH_FIELD : \"CHANGE_SEARCH_FIELD\"\r\n}\r\n\r\nexport default SearchActionType;","const RobotActionType = {\r\n    SEARCH_ROBOTS_START : \"SEARCH_ROBOTS_START\",\r\n    SEARCH_ROBOTS_SUCCESS : \"SEARCH_ROBOTS_SUCCESS\",\r\n    SEARCH_ROBOTS_FAILURE : \"SEARCH_ROBOTS_FAILURE\"\r\n}\r\n\r\nexport default RobotActionType;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/errorboundary'\r\nimport './App.css';\r\nimport {connect} from 'react-redux'\r\nimport {setSearchField} from '../redux/search-change/search-actions'\r\nimport {requestRobots} from '../redux/search-robots/robot-actions'\r\n\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render() {\r\n    const { searchfield, onSearchChange, robots, isPending } = this.props\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ search, robot}) => ({\r\n  searchfield: search.searchfield,\r\n  robots: robot.robots,\r\n  isPending: robot.isPending\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import SearchActionType from './search-types'\r\n\r\nexport const setSearchField = txt => ({\r\n    type: SearchActionType.CHANGE_SEARCH_FIELD,\r\n    payload: txt\r\n})\r\n\r\n\r\n\r\n","import RobotActionType from './robot-types'\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: RobotActionType.SEARCH_ROBOTS_START })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(\r\n            users => dispatch({ \r\n            type: RobotActionType.SEARCH_ROBOTS_SUCCESS,\r\n            payload: users\r\n            })\r\n        )\r\n        .catch(\r\n            error => dispatch({\r\n            type: RobotActionType.SEARCH_ROBOTS_FAILURE,\r\n            payload: error\r\n            })\r\n        )\r\n}\r\n","import RobotActionType from './robot-types'\r\n\r\nconst INITIAL_STATE = {\r\n    error: '',\r\n    robots: [],\r\n    isPending: true\r\n}\r\n\r\nconst robotReducer = (state=INITIAL_STATE, action={}) => {\r\n    switch(action.type){\r\n        case RobotActionType.SEARCH_ROBOTS_START:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case RobotActionType.SEARCH_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isPending: false,\r\n                robots: action.payload,\r\n                error: null\r\n            }\r\n        case RobotActionType.SEARCH_ROBOTS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPending: false,\r\n                error: action.payload,\r\n                robots: []\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default robotReducer\r\n\r\n","import SearchActionType from './search-types'\r\n\r\nconst INITIAL_STATE = {\r\n    searchfield: ''\r\n}\r\n\r\nconst searchReducer = (state=INITIAL_STATE, action={}) => {\r\n    switch(action.type){\r\n        case SearchActionType.CHANGE_SEARCH_FIELD :\r\n            return {\r\n                ...state,\r\n                searchfield: action.payload\r\n            }\r\n        default: \r\n            return state\r\n    }    \r\n}\r\n\r\nexport default searchReducer\r\n","import {combineReducers} from 'redux'\r\nimport robotReducer from './search-robots/robot-reducer'\r\nimport searchReducer from './search-change/search-reducers'\r\n\r\nconst rootReducer = combineReducers({\r\n    robot: robotReducer,\r\n    search: searchReducer\r\n})\r\n\r\nexport default rootReducer","import {createStore, applyMiddleware} from 'redux'\r\nimport rootReducer from './root-Reducer'\r\nimport {createLogger} from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst logger = createLogger()\r\nconst middleware = [logger, thunk]\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './redux/store'\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n            <Provider store = {store}>\r\n                <App />\r\n            </Provider>\r\n            ,document.getElementById('root')\r\n        );\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}